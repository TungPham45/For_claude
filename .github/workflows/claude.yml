name: Claude Code Helper

on:
  issues:
    types: [opened]

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  run-claude:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call Claude API
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Debug: Check if API key exists
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "‚ùå ANTHROPIC_API_KEY not found"
            exit 1
          fi
          echo "‚úÖ API Key found (length: ${#ANTHROPIC_API_KEY})"

          # Create JSON payload using jq (safe for text)
          jq -n \
            --arg title "${{ github.event.issue.title }}" \
            --arg body "${{ github.event.issue.body }}" \
            '{
              model: "claude-3-sonnet-20240229",
              max_tokens: 1000,
              messages: [
                {
                  role: "user",
                  content: ("Help with this GitHub issue: " + $title + " - " + $body)
                }
              ]
            }' > payload.json

          echo "=== Request Payload ==="
          cat payload.json

          # Call Claude API and capture response
          HTTP_STATUS=$(curl -s -w "%{http_code}" -o claude_response.json \
            -X POST https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @payload.json)

          echo "=== HTTP Status: $HTTP_STATUS ==="
          cat claude_response.json

          if [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ùå Claude API call failed"
            exit 1
          fi

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const response = JSON.parse(fs.readFileSync('claude_response.json', 'utf8'));
              let content = '‚ùå Claude did not return a valid response.';

              if (Array.isArray(response.content) && response.content[0]?.text) {
                content = `ü§ñ **Claude's Analysis:**\n\n${response.content[0].text}`;
              } else if (response.error?.message) {
                content = `‚ùå **Claude API Error:** ${response.error.message}`;
              }

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content
              });

            } catch (error) {
              const raw = fs.readFileSync('claude_response.json', 'utf8');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå Error reading Claude's response:\n\`\`\`\n${error.message}\n\`\`\`\n\nRaw response:\n\`\`\`json\n${raw.substring(0, 500)}...\n\`\`\``
              });
            }
