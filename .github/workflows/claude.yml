name: Claude Code Helper

on:
  issues:
    types: [opened]

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  run-claude:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call Claude API
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Debug: Check if API key exists
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "‚ùå ANTHROPIC_API_KEY not found"
            exit 1
          fi
          echo "‚úÖ API Key found (length: ${#ANTHROPIC_API_KEY})"

          # Safely handle issue content with proper escaping
          ISSUE_TITLE=$(echo '${{ github.event.issue.title }}' | jq -R .)
          ISSUE_BODY=$(echo '${{ github.event.issue.body }}' | jq -R .)

          # Create JSON payload using jq for proper escaping
          jq -n \
            --argjson title "$ISSUE_TITLE" \
            --argjson body "$ISSUE_BODY" \
            '{
              "model": "claude-3-sonnet-20240229",
              "max_tokens": 1000,
              "messages": [
                {
                  "role": "user",
                  "content": ("Help with this GitHub issue: " + $title + " - " + $body)
                }
              ]
            }' > payload.json

          echo "=== Request Payload ==="
          cat payload.json

          # Make API call and capture HTTP status
          HTTP_STATUS=$(curl -w "%{http_code}" -X POST https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @payload.json \
            -o claude_response.json)

          echo "=== HTTP Status: $HTTP_STATUS ==="
          echo "=== API Response ==="
          cat claude_response.json

          # Check if API call was successful
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ùå API call failed with status $HTTP_STATUS"
            echo "Response:" 
            cat claude_response.json
            exit 1
          fi

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const response = JSON.parse(fs.readFileSync('claude_response.json', 'utf8'));
              console.log('Full API Response:', JSON.stringify(response, null, 2));
              
              let content = '‚ùå Claude did not return a valid response.';
              
              // Check for different response formats
              if (response.content && Array.isArray(response.content) && response.content[0]) {
                if (response.content[0].text) {
                  content = `ü§ñ **Claude's Analysis:**\n\n${response.content[0].text}`;
                }
              } else if (response.error) {
                content = `‚ùå **API Error:** ${response.error.message || JSON.stringify(response.error)}`;
              } else if (response.message) {
                content = `üìù **Response:** ${response.message}`;
              }

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content
              });
              
            } catch (error) {
              console.error('Error processing Claude response:', error);
              
              // Read raw file content for debugging
              const rawContent = fs.readFileSync('claude_response.json', 'utf8');
              console.log('Raw file content:', rawContent);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **Error processing Claude's response:**\n\`\`\`\n${error.message}\n\`\`\`\n\n**Raw response:**\n\`\`\`json\n${rawContent.substring(0, 500)}...\n\`\`\``
              });
            }